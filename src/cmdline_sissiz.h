/* cmdline_sissiz.h */

/* File autogenerated by gengetopt version 2.19.1  */

#ifndef CMDLINE_SISSIZ_H
#define CMDLINE_SISSIZ_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION VERSION
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  int nossr_flag;	/* No site specific rates (default=off).  */
  const char *nossr_help; /* No site specific rates help description.  */
  int flanks_arg;	/* Flanking sites.  */
  char * flanks_orig;	/* Flanking sites original value given at command line.  */
  const char *flanks_help; /* Flanking sites help description.  */
  char * outfile_arg;	/* Output filename.  */
  char * outfile_orig;	/* Output filename original value given at command line.  */
  const char *outfile_help; /* Output filename help description.  */
  int num_samples_arg;	/* Number of samples.  */
  char * num_samples_orig;	/* Number of samples original value given at command line.  */
  const char *num_samples_help; /* Number of samples help description.  */
  int num_samples_regression_arg;	/* Number of samples in regression.  */
  char * num_samples_regression_orig;	/* Number of samples in regression original value given at command line.  */
  const char *num_samples_regression_help; /* Number of samples in regression help description.  */
  double precision_arg;	/* Cut-off for mononucleotide content (Euclidean distance of frequency vector).  */
  char * precision_orig;	/* Cut-off for mononucleotide content (Euclidean distance of frequency vector) original value given at command line.  */
  const char *precision_help; /* Cut-off for mononucleotide content (Euclidean distance of frequency vector) help description.  */
  int simulate_flag;	/* Simulate only (default=off).  */
  const char *simulate_help; /* Simulate only help description.  */
  int verbose_flag;	/* verbose (default=off).  */
  const char *verbose_help; /* verbose help description.  */
  int mono_flag;	/* Mononucleotide (default=off).  */
  const char *mono_help; /* Mononucleotide help description.  */
  int di_flag;	/* Mononucleotide (default=on).  */
  const char *di_help; /* Mononucleotide help description.  */
  int dna_flag;	/* Print Us or Ts (default=on).  */
  const char *dna_help; /* Print Us or Ts help description.  */
  int rna_flag;	/* Print Us or Ts (default=off).  */
  const char *rna_help; /* Print Us or Ts help description.  */
  int tstv_flag;	/* Transition/Transversion ratio (default=on).  */
  const char *tstv_help; /* Transition/Transversion ratio help description.  */
  float kappa_arg;	/* kappa parameter.  */
  char * kappa_orig;	/* kappa parameter original value given at command line.  */
  const char *kappa_help; /* kappa parameter help description.  */
  int gamma_arg;	/* Categories for gamma for kappa ML estimation.  */
  char * gamma_orig;	/* Categories for gamma for kappa ML estimation original value given at command line.  */
  const char *gamma_help; /* Categories for gamma for kappa ML estimation help description.  */
  int print_rates_flag;	/* Print rates to file (debugging) (default=off).  */
  const char *print_rates_help; /* Print rates to file (debugging) help description.  */
  int clustal_flag;	/* Output format CLUSTAL W (default=on).  */
  const char *clustal_help; /* Output format CLUSTAL W help description.  */
  int maf_flag;	/* Output format MAF (default=off).  */
  const char *maf_help; /* Output format MAF help description.  */
  int fasta_flag;	/* Output format FASTA (default=off).  */
  const char *fasta_help; /* Output format FASTA help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int nossr_given ;	/* Whether nossr was given.  */
  int flanks_given ;	/* Whether flanks was given.  */
  int outfile_given ;	/* Whether outfile was given.  */
  int num_samples_given ;	/* Whether num-samples was given.  */
  int num_samples_regression_given ;	/* Whether num-samples-regression was given.  */
  int precision_given ;	/* Whether precision was given.  */
  int simulate_given ;	/* Whether simulate was given.  */
  int verbose_given ;	/* Whether verbose was given.  */
  int mono_given ;	/* Whether mono was given.  */
  int di_given ;	/* Whether di was given.  */
  int dna_given ;	/* Whether dna was given.  */
  int rna_given ;	/* Whether rna was given.  */
  int tstv_given ;	/* Whether tstv was given.  */
  int kappa_given ;	/* Whether kappa was given.  */
  int gamma_given ;	/* Whether gamma was given.  */
  int print_rates_given ;	/* Whether print-rates was given.  */
  int clustal_given ;	/* Whether clustal was given.  */
  int maf_given ;	/* Whether maf was given.  */
  int fasta_given ;	/* Whether fasta was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_SISSIZ_H */
